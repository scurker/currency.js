// @flow

declare type $currency$any = number | string | typeof currency;

declare type $currency$opts = {
  symbol?: string,
  separator?: string,
  decimal?: string,
  formatWithSymbol?: boolean,
  errorOnInvalid?: boolean,
  precision?: number,
  increment?: number,
  useVedic?: boolean,
  pattern?: string,
  negativePattern?: string
}

declare interface $currency {
  (value: $currency$any, opts?: $currency$opts): typeof currency,
  add(number: $currency$any): typeof currency;
  subtract(number: $currency$any): typeof currency;
  multiply(number: $currency$any): typeof currency;
  divide(number: $currency$any): typeof currency;
  distribute(count: number): Array<typeof currency>;
  dollars(): number;
  cents(): number;
  format(useSymbol?: boolean): string;
  toString(): string;
  toJSON(): number;
  +intValue: number;
  +value: number;
}

declare function currency(value: $currency$any, opts?: $currency$opts): $currency;
declare module.exports: typeof currency;
